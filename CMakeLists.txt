CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the build type (Release or Debug)" FORCE)
ENDIF()
SET(CMAKE_MODULE_PATH "CMake/Modules")
PROJECT(TERRA)
IF(CMAKE_COMPILER_IS_GNUCXX)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ENDIF()

# Add any Packages here
FIND_PACKAGE(SFML 2 COMPONENTS SYSTEM WINDOW GRAPHICS AUDIO NETWORK REQUIRED)
INCLUDE_DIRECTORIES(
	${SFML_INCLUDE_DIR}
)
# End Packages

FILE(GLOB_RECURSE Source src/*.cpp src/*.c)
IF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	SET(OS_WINDOWS 1)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	SET(OS_LINUX 1)
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	SET(OS_MACOSX 1)
ELSE()
	MESSAGE(WARNING "Unsupported Operating System")
	RETURN()
ENDIF()
SET(PROJECT_BINARY_DIR bin)
IF(OS_WINDOWS)
	SET(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/Windows)
ELSEIF(OS_LINUX)
	SET(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/Linux)
ELSEIF(OS_MACOSX)
	SET(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/Macintosh)
ELSE()
	MESSAGE(WARNING "Unsupported Operating System")
	RETURN()
ENDIF()
IF(CMAKE_SIZEOF_VOID_P EQUAL 4)
	SET(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/x86)
ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/x64)
ELSE()
	MESSAGE(WARNING "Unsupported Architecture")
	RETURN()
ENDIF()
IF(CMAKE_BUILD_TYPE MATCHES Release)
	SET(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/Release)
ELSEIF(CMAKE_BUILD_TYPE MATCHES Debug)
	SET(PROJECT_BINARY_DIR ${PROJECT_BINARY_DIR}/Debug)
ENDIF()
FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR})
FILE(COPY res DESTINATION ${PROJECT_BINARY_DIR})
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})
ADD_EXECUTABLE(Terra ${Source})

# Add any Packages here
TARGET_LINK_LIBRARIES(Terra
						optimized ${SFML_NETWORK_LIBRARY}
						optimized ${SFML_AUDIO_LIBRARY}
						optimized ${SFML_GRAPHICS_LIBRARY}
						optimized ${SFML_WINDOW_LIBRARY}
						optimized ${SFML_SYSTEM_LIBRARY}
						debug ${SFML_NETWORK_LIBRARY_DEBUG}
						debug ${SFML_AUDIO_LIBRARY_DEBUG}
						debug ${SFML_GRAPHICS_LIBRARY_DEBUG}
						debug ${SFML_WINDOW_LIBRARY_DEBUG}
						debug ${SFML_SYSTEM_LIBRARY_DEBUG}
)
# End Packages
